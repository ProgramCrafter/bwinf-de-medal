<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=600, maximum-scale=1">
    {{#if title }}
        <title>Jugendwettbewerb Informatik â€“ {{title}}</title>
    {{else}}
        <title>Jugendwettbewerb Informatik: Programmieren â€“ leichter, als du denkst!</title>
    {{/if}}

    <script src="/static/lib/jquery/jquery-3.2.1.min.js"></script>
    <script src="/static/lib/fioipem/jschannel-190528.js"></script>
    <script src="/static/lib/fioipem/task-xd-pr-190528.js"></script>
    <script src="/static/lib/medal/medal-0.0.2.js"></script>

    <link rel="icon" href="/static/images/favicon.png" type="image/png">
<style>
body{
  margin: 0px;
  padding: 0px;
  overflow: hidden;
font-family:sans-serif;
}


#bar, #bar>div {
display:inline-block;
padding: 8px;
margin:0px;
background: #8ca405;
color:white;
font-size:12pt;
height: 35px;
overflow-y:hidden;
}

#bar {
display:block;
padding:0px;
width:100%;
}

#bar>.nav {
float:right;
}
#bar>#time {
float:right;
padding:0px 8px;
text-align:right;
}
#timetext{
padding:0px;
margin:0px;
font-size:8pt;
}
#timetime{
padding:0px;
margin:0px;
margin-top:-8px;
font-size:18pt;
}
#ttsec {
font-size:8pt;
}

#bar>#hamburger, #bar>#menu, #bar>#time {
background: #6d8004;
font-weight:bold;
padding-left: 10px;
padding-right: 10px;
}

#bar>div.highlight {
background: #f5fbe8;
  color:#334900;
  font-size: 10pt;
}

.max10 {
  max-width: 10vw;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.max20 {
  max-width: 20vw;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

iframe {
width: 100vw;border: 0px;height: calc(100vh - 35px);
}

a {
color: #eee;
text-decoration: none;
}

{{#if readonly}}
#bar, #bar>div {
background: #a48c05
}

#bar>#hamburger, #bar>#menu, #bar>#time {
background: #806d04;
}

#bar>div.highlight {
    background: #fbf5e8;
    color:#493300;

}
{{/if}}
</style>
</head><body style="">

<div id="bar">

{{#if contestname}}
<div id="menu" class="max20" title="{{contestname}}">
{{#if contestid}}
<a href="/contest/{{contestid}}">{{contestname}}</a>
{{else}}
{{contestname}}
{{/if}}
</div>
{{/if}}
<div class="max20" title="{{name}}">
{{name}}
</div>

{{#each subtasks}}
  {{#if active}}
    <div class="highlight max10" title="{{linktext}}">
      {{linktext}}
    </div>
  {{else}}
    <div class="max10" title="{{linktext}}">
      <a href="/task/{{id}}">{{linktext}}</a>
   </div>
  {{/if}}
{{/each}}

{{#if readonly}}
<div class="max10" title="Review-Modus">
<em>Review-Modus</em>
</div>
{{/if}}

{{#unless readonly}}
{{#if time_info.has_timelimit}}
<div id="time" class="max10" title="Verbleibende Zeit">
<div id="timetext">
Verbleibende Zeit
</div>
<div id="timetime">
{{time_left_mh_formatted}}<span id="ttsec">{{time_left_sec_formatted}}</span>
</div>
<script>
  var seconds_left_at_start = {{time_info.left_secs_total}};
  var timerStart = Date.now();

  function lz(a) {
    var b = a.toString();
    if (b.length < 2) {
      return "0" + b;
    }
    return b;
  }

  function updateTimer() {
    var seconds_passed = (Date.now() - timerStart) / 1000;
    var seconds_left = seconds_left_at_start - seconds_passed;

    var timer_sign = "";
    {{#if time_info.exempt_from_timelimit}}
      // Workaround for teachers to allow them to stay in the task even if
      // the time has run out.
      if (seconds_left < 0) {
        seconds_left = -seconds_left;
        timer_sign = "â€“";
      }
    {{/if}}

    if (seconds_left > 0) {
      var hour = seconds_left / 3600 | 0;
      var min = (seconds_left / 60 | 0) % 60 | 0;
      var sec = seconds_left % 60 | 0;

      text = timer_sign + hour.toString() + ":" + lz(min) + "<span id=\"ttsec\">:" + lz(sec) + "</span>";
      document.getElementById("timetime").innerHTML = text;
    }
    else if (seconds_left > -10) {
       document.getElementById("timetime").innerHTML = "0:00<span id=\"ttsec\">:00</span>";
    }
    else {
       document.getElementById("contestpage").click()
    }
  }

  setInterval(updateTimer, 300);
</script>
</div>
{{/if}}
{{/unless}}

<script>
function redirectOverview() {
  window.location.href = "/contest/{{contestid}}";
}

function enterFullscreen(element) {
  if(element.requestFullscreen) {
    element.requestFullscreen();
  } else if(element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if(element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else if(element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
  }
}
function exitFullscreen() {
  if(document.exitFullscreen) {
    document.exitFullscreen();
  } else if(document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if(document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
}
var fullscreen = false;
function toggleFullscreen(element) {
if (fullscreen) {
  exitFullscreen();
fullscreen = false;
    document.getElementById("tgfs").innerText = "â‡±";
}
else {
  enterFullscreen(element);
  fullscreen = true;
    document.getElementById("tgfs").innerText = "â‡²";
  }
}
</script>
<div class="nav max10" onclick="toggleFullscreen(document.documentElement);" title="Vollbild">
<a href="javascript:;"><span id="tgfs">â‡±</span> Vollbild</a>
</div>

{{#if contestid}}
<div class="nav max10" title="Ãœbersicht">
<a href="/contest/{{contestid}}" id="contestpage">ðŸ¡… Ãœbersicht</a>
</div>
{{/if}}
{{#if nexttask}}
<div class="nav max10" title="NÃ¤chste Aufgabe">
<a href="{{ nexttask }}">ðŸ¡† NÃ¤chste Aufgabe</a>
</div>
{{/if}}
{{#if prevtask}}
<div class="nav max10" title="Vorherige Aufgabe">
<a href="{{ prevtask }}">ðŸ¡„ Vorherige Aufgabe</a>
</div>
{{/if}}

</div>
</div>

<iframe src="/{{taskpath}}?{{#if tasklang}}language={{tasklang}}&{{/if}}channelId=task" id="ifr" style="border: 0px; margin:0px; padding:0px; "></iframe>

<script>
// Magic: This sets some internal state of the medal js lib that is usually read from the url fragment identifier
window.hashdict["taskid"] = "{{taskid}}";
window.hashdict["csrftoken"] = "{{csrf_token}}";
{{#if readonly}}
  window.hashdict["readonly"] = "true";
{{/if}} //

var options = {
  minScore:0,
  maxScore:100,
  noScore:0,
  randomSeed:0,
  readOnly:false,
  options:{difficulty:"easy", log:1},
}

var myLoadViews = {
  editor: true,
  forum: true,
  hints: true,
  submission: true,
  task: true,
  grader: true,
  metadata: true,
}

var myViews = {
  task: true,
}

function ec(name) {
  return function(e){
    console.log(name + " error:");
    console.log(e);
  }
}

function noop(){}

function getTaskProxyCallback(task) {
  function reloadAnswerCallback() {
    task.gradeAnswer("", {}, noop, ec("task.gradeAnswer"));
  }

  function reloadStateCallback() {
    function load_task_callback(data) {
      if ("text" in data) {
        task.reloadAnswer(data["text"], reloadAnswerCallback, ec("task.reloadAnswer"));
      } else {
        task.reloadAnswer('', reloadAnswerCallback, ec("task.reloadAnswer"));
      }
    }
    function load_task_error() {
      task.reloadAnswer('', reloadAnswerCallback, ec("task.reloadAnswer"));
      alert("Laden fehlgeschlagen");
    }

    {{#if submission}}
      window.load_submission_object({{submission}}, load_task_callback, load_task_error);
    {{else}}
      window.load_task_object(load_task_callback, load_task_error);
    {{/if}} //
  }

  function showViewsCallback(){
    task.reloadState('', reloadStateCallback, ec("task.reloadState"));
  }

  function loadCallback(){
    task.showViews(myViews, showViewsCallback, ec("task.showViews"));
  }

  function getViewsCallback(views){
    task.load(myLoadViews, loadCallback, ec("task.load"))
  }

  var previous_answer = "";

  function getAnswerCallback(answer) {
    if (window.hashdict["readonly"] == "true") {
      return;
    }

    // If the answer did not change since last save, there is nothing to do
    if (answer == previous_answer) {
      return;
    }

    console.log("In task.gradeAnswer callback:");
    console.log(answer);

    function gradeAnswerCallback(score, message, scoreToken){
      function save_task_callback() {
        console.log("OK transmission");

        // Now we know that the answer has been saved
        previous_answer = answer;
      };
      function save_task_error() {
        console.log("ERROR transmission");
        alert("Speichern fehlgeschlagen");
      };

      window.save_task_object({"text": answer}, score, save_task_callback, save_task_error);
    }

    task.gradeAnswer(answer, {}, gradeAnswerCallback, ec("task.gradeAnswer"));
  }

  var platform = {
    getTaskParams: function(key, def, cb, ecb) {
      if (!key && !def) {
        cb(options);
      }
      else {
        cb();
      }
    },
    validate: function(mode, cb, ecb) {
      if (mode == 'done') {
        task.getAnswer(getAnswerCallback, ec("task.getAnswer"));
        if (cb) {cb();}
      }
      else if (mode == 'next' || mode == 'nextImmediate') {
        window.parent.redirectOverview();
      }
      if (mode == 'log') {
        task.getAnswer(getAnswerCallback, ec("task.getAnswer"));
        if (cb) {cb();}
      }
      else {
        console.error("Unknown mode: '" + mode + "'");
        if (ecb) {ecb();}
      }
    },
    showViews: function(views, cb, ecb) {
      cb(options);
    },
    openUrl: function(textId, cb, ecb) {
      cb();
    },
    askHint: function(ht, cb, ecb) {
      cb();
    },
    updateDisplay: function(opt, cb, ecb) {
      cb();
    },
    initWithTask: function(t, cb, ecb) {
      cb(options);
    },
  };

  TaskProxyManager.setPlatform(task, platform);

  task.getViews(getViewsCallback, ec("task.getViews"));

  if (window.hashdict["readonly"] != "true" && {{auto_save_interval_ms}} > 0) {
    setInterval(function(){
      task.getAnswer(getAnswerCallback, ec("task.getAnswer"));
    }, {{auto_save_interval_ms}});
  }
}

function main() {
  TaskProxyManager.getTaskProxy("ifr", getTaskProxyCallback, false, ec("task.getTaskProxy"));
}

setTimeout(main, 1);

    </script>
</body></html>
